// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
syntax = "proto3";

package receptor_v1;

option go_package = "github.com/trustero/api/go/receptor_v1";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";


// Receptor service, or a Trustero client application, collects findings supporting the use of services from a
// service provider account.  For example, AWS is a service provider, AWS account is a service provider account,
// and S3 is a service.  Trustero associates collected evidence to business controls in support of the business'
// stated procedures.  Evidences are organized into a finding.  Each evidence is associated with a service entity
// and contains the service's configuration information. For example, an AWS S3 bucket and its configuration.
service Receptor {

  // Verified reports whether the provided credential is a valid service provider credential for purpose of
  // discovering service entities and reporting findings.  This rpc call is typically made as callback by a
  // receptor to Trustero from a check-credential receptor request.
  rpc Verified(Credential) returns (google.protobuf.Empty);

  // GetConfiguration for the receptor and service provider credential using the provided receptor object identifier.
  // This rpc call is typically made as a callback by a receptor prior to making a report findings or discover
  // service entities receptor request.
  rpc GetConfiguration(ReceptorOID) returns (ReceptorConfiguration);

  // Discovered reports known service entities.  A receptor or a Trustero client application reports its known
  // service entities on request.  A service entity is a configurable asset of a service such as an S3 bucket.  This
  // call returns a string value discovery ID or an error.
  rpc Discovered(ServiceEntities) returns (google.protobuf.StringValue);

  // Report a finding to Trustero.  A receptor or a Trustero client application reports its findings to Trustero on
  // a periodic basis.  This call returns a string value collection ID or an error.
  rpc Report(Finding) returns (google.protobuf.StringValue);

  // Notify Trustero a long running report finding or discover service entities receptor-request has completed.
  // JobResult contains information about the receptor-request and it's corresponding result.
  rpc Notify(JobResult) returns (google.protobuf.Empty);

  // SetConfiguration reports the configuration for receptors that need extra configuration to access a service.
  // This call is typically made as a callback by a receptor after credential verification.
  rpc SetConfiguration(ReceptorConfiguration) returns (google.protobuf.Empty);

  // StreamReport is used to stream large reports to Trustero. The report is sent in chunks and the first chunk  
  // contains the boundary with the mime type.
  rpc StreamReport(stream ReportChunk) returns (ReportResponse);


}


// Finding is a set of evidence(s) collected from a service provider account.
message Finding {

  // Unique receptor identifier.  A receptor is expected to report findings from only one service provider type.  A
  // stable identifier that represent the type of receptor reporting this finding.  The identifier is a simple URL
  // encoded string that includes an organization name and the service provider name.  For example: "trustero_gitlab".
  string receptor_type = 1;

  // The receptor's evidence source.
  string service_provider_account = 2;

  // Entities is a list of service entity configurations in the service provider account.
  repeated ServiceEntity entities = 3;

  // One or more evidence collected by a typical receptor scan.
  repeated Evidence evidences = 4;

}


// Evidence is a unstructured or structured document that represent the how a service is being used within a
// service provider account.  For example, the configuration of an S3 bucket in AWS.
message Evidence {

  // Caption is a human readable English string that identifies this evidence.  Caption must be stable for
  // all scans of the same evidence type.  Trustero uses the caption to associate this evidence with a
  // set of relevant controls.
  string caption = 1;

  // Description is a human readable English string describing the content of this evidence.  Description
  // tells Trustero and users contents of the evidence and how
  string description = 2;

  // Service_name is the name of service this evidence was collected from.  For example, "S3" or "GitLab"
  string service_name = 3;

  // Entity_type specifies the row type and should correspond to a ServiceEntity.  An entity_type typically
  // represents a specific configurable entity such as AWS ECS "Cluster".
  string entity_type = 4;

  // Sources are raw service provider API requests and responses used to generate this evidence.  The raw API requests
  // and responses serve as proof the evidence correlates to real service configurations.
  repeated Source sources = 5;

  // Evidence_type can be either an unstructured (Document) or structured (Struct) type.
  oneof evidence_type {

    // Document is an unstructured evidence.
    Document doc = 6;

    // Struct is a structured evidence.
    Struct struct = 7;

  }

  // Service_account_id is the member account of the organization. For example, an AWS account number in an organization
  // that has more than one account.
    string service_account_id = 8;

  // Controls is a list of control names that the evidence is associated with.
  repeated string controls = 9;

  // is_manual is a boolean that indicates whether the evidence was manually collected or not.
  bool is_manual = 10;

  // relevant_date is the date the evidence was collected.
  google.protobuf.Timestamp relevant_date = 11;

  // evidence_object_type is an enum of  EvidenceObjectType. For example, "evidences", "controls", "policies", "policy_document".
  EvidenceObjectType evidence_object_type = 12;
}



// Source is the raw service provider API request and response.
message Source {

  // Raw_api_request is the raw API request used to generate this evidence.
  string raw_api_request = 1;

  // Raw_api_response is the raw API response used to generate this evidence.
  string raw_api_response = 2;
}

message Sources {
  repeated Source sources = 1;
}

// Document is an unstructured evidence provided as a MIME document.
message Document {

  // Mime is the document type defined using [MIME].
  // [MIME]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
  string mime = 2;

  // Body is the opaque document body.  The document body must match the type defined by the mime attribute.
  bytes body = 3;
  
  // Filepath for streaming large evidence - should be accessible by the server.
  string stream_file_path = 4;
}


// Struct is a structured evidence defined in tabular form.  Each struct typically represent a service type (see
// Evidence message definition).  Each struct consists of rows of data.  Each row typically represent a service
// instance and its configurations.  A row  contains column name and column value pairs.  All rows in a struct
// must have the same column name-value pairs.
message Struct {

  // Rows of key-value pairs.  Each row typically represents the configuration of a service instance or an data
  // type such as a member of GitLab group.
  repeated Row rows = 2;

  // Col_display_names is a map of row column name to it's corresponding display name.  Display names are used
  // by the user interface to render a field in a struct's rows.
  map<string, string> col_display_names = 3;

  // Col_display_order is an ordered list of row column names.  The order of the column names are used by the user
  // interface to render the column order of a struct's rows.
  repeated string col_display_order = 4;

  // Col_tags is a map of column tag to row column name. These tags are used by Trustero's evidence testing interface
  // to identify relevant evidence.
  map<string, string> col_tags = 5;
}


// Row is a row of structured data.
message Row {

  // Entity_instance_id of a discovered entity instance.  For example, an AWS "ECS" cluster UUID or GitLab
  // "repository" ID.
  string entity_instance_id = 1;

  // Cols are columns of the row in column name to value pairs.  All rows in a struct must have the same column
  // names and corresponding value types.  In addition, one of the key-value pair in the cols map must be the
  // entity_instance_id, a unique instance of this row's Struct.entity_type.
  map<string, Value> cols = 2;
}


// Value is a [Struct.row.col] column value.  Value types can be simple protobuf scalar or [google.proto.Timestamp].
message Value {
  oneof value_type {
    double double_value = 1;
    float float_value = 2;
    int32 int32_value = 3;
    int64 int64_value = 4;
    uint32 uint32_value = 5;
    uint64 uint64_value = 6;
    bool bool_value = 7;
    string string_value = 8;
    google.protobuf.Timestamp timestamp_value = 9;
    StringList string_list_value = 10;
    StructList struct_list_value = 11;
  }
}

message StringList {
  repeated string values = 1;
}

message StructList {
  repeated StructStruct values = 1; // Array of structs
}

message StructStruct {
  map<string, Value> fields = 1; // Fields of the struct
}

// ServiceEntities are configurable entities within a service provider account.  For example, service entities in
// an AWS account include S3 buckets, ECS clusters, RDS database instances, etc.  The boundary of a service entity
// depends on how a receptor represents it's findings.  Each service instance_id should be associated with at least
// one Evidence.
message ServiceEntities {

  // Receptor_type is a unique receptor type.  A stable string identifier that represent the type of receptor
  // reporting this finding.  The identifier is a simple URL encode string that includes the organization name
  // and a service provider name.  For example "trustero_gitlab".
  string receptor_type = 1;

  // Service_provider_account is the service provider account where the services are configured in.
  string service_provider_account = 2;

  // Entities is a list of service instances configured in the service provider account.
  repeated ServiceEntity entities = 3;
}


// ServiceEntity is a discovered service entity instance which represents a configurable entity provided by the
// service.  For example, an AWS ECS cluster or a GitLab repository.  These service entities are associated with
// detailed configurations collected by Receptor.Reported() calls.  Service entities allows Trustero to filter
// collected evidence that aren't relevant to specific audit contexts.
message ServiceEntity {

  // Service_name of the entity source.  This is a Trustero assigned identifier for a known service such as
  // "GitLab" or AWS "ECS".
  string service_name = 1;

  // Entity_type is a service configurable object type such as a GitLab "repository" or AWS ECS "cluster".  The
  // entity_instance_name and entity_instance_id must represent an instance of the subtype.  For example,
  // "Java 1.5" maybe a valid GitLab repository name or "Elastic front end cluster" maybe a valid AWS ECS
  // cluster name.
  string entity_type = 2;

  // Entity_instance_name of a discovered service entity instance.  For example, an AWS ECS cluster name or a
  // GitLab repository name.  Entity_instance_name of an entity may change for a given entity instance but
  // it's entity_instance_id is stable.
  string entity_instance_name = 3;

  // Entity_instance_id of a discovered entity instance.  For example, an AWS ECS cluster UUID or GitLab
  // repository ID.
  string entity_instance_id = 4;

  // Service_account_id is the member account of the organization. For example, an AWS account number in a an organization
  // that has more than one account.
  string service_account_id=5;
}


// Credential is returned by a Verified request noting if a given service provider account credential is  valid.
message Credential {

  // Receptor_object_id is Trustero's receptor record identifier.  This identifier is typically provided to the
  // receptor as part of a reporting findings or discover services request.
  string receptor_object_id = 1;

  // Credential is the service provider credential being verified.
  string credential = 2;

  // Is_credential_valid report whether the service provider credential provided to the receptor verify request
  // is valid.
  bool is_credential_valid = 3;

  // Message contains the reason for why the service provider credential in this message is invalid.
  string message = 4;

  // Exceptions contains information about the permissions that are missing for the credentials provided.
  string exceptions = 5;
}


// ReceptorOID is Trustero's receptor record identifier.
message ReceptorOID {

  // Receptor_object_id is the string representation of a Trustero persistent record.
  string receptor_object_id = 1;
}


// ReceptorConfiguration contains a configurations a receptor needs to access a service provider account.
message ReceptorConfiguration {

  // Receptor_object_id is Trustero's receptor record identifier.
  string receptor_object_id = 1;

  // Credential required to access a service provider for report finding and discover services purposes.
  string credential = 2;

  // Config holds additional receptor configuration to access a service provider account.
  string config = 3;

  // Service_provider_account is the service provider account name.
  string service_provider_account = 4;

  // Model_id is the receptor model id
  string model_id = 5;
}


// JobResult reports the result of a receptor request.
message JobResult {

  // Tracer_id is used to track the progress of the receptor request.
  string tracer_id = 1;

  // Command is the receptor request that completed.  One of "verify", "scan", or "discover"
  string command = 2;

  // Result is receptor request result.  One of "success", "fail", or "error".
  string result = 3;

  // Receptor_object_id is Trustero's receptor record identifier.
  string receptor_object_id = 4;

  // Exceptions contain information about the error like permission missing for the credentials provided.
  string exceptions = 5;

}

message ReportChunk {
  bytes content = 1;
  bool is_boundary = 2; // Whether this chunk contains the boundary
}

// Server response after receiving the whole streamed report
message ReportResponse {
  string status = 1;  // Could use "ok" or other status information
} 


// EvidenceObjectType enum to identify the type of evidence object reported to Trustero. 
enum EvidenceObjectType {
  EVIDENCES = 0;
  CONTROLS = 1;
  POLICIES = 2;
  POLICY_DOCUMENT = 3;
  CONTROL_POLICY_MAPPING = 4;
}