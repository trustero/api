// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: receptor_v1/receptor.proto

package receptor_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Receptor_Verified_FullMethodName         = "/receptor_v1.Receptor/Verified"
	Receptor_GetConfiguration_FullMethodName = "/receptor_v1.Receptor/GetConfiguration"
	Receptor_Discovered_FullMethodName       = "/receptor_v1.Receptor/Discovered"
	Receptor_Report_FullMethodName           = "/receptor_v1.Receptor/Report"
	Receptor_Notify_FullMethodName           = "/receptor_v1.Receptor/Notify"
	Receptor_SetConfiguration_FullMethodName = "/receptor_v1.Receptor/SetConfiguration"
	Receptor_StreamReport_FullMethodName     = "/receptor_v1.Receptor/StreamReport"
)

// ReceptorClient is the client API for Receptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Receptor service, or a Trustero client application, collects findings supporting the use of services from a
// service provider account.  For example, AWS is a service provider, AWS account is a service provider account,
// and S3 is a service.  Trustero associates collected evidence to business controls in support of the business'
// stated procedures.  Evidences are organized into a finding.  Each evidence is associated with a service entity
// and contains the service's configuration information. For example, an AWS S3 bucket and its configuration.
type ReceptorClient interface {
	// Verified reports whether the provided credential is a valid service provider credential for purpose of
	// discovering service entities and reporting findings.  This rpc call is typically made as callback by a
	// receptor to Trustero from a check-credential receptor request.
	Verified(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetConfiguration for the receptor and service provider credential using the provided receptor object identifier.
	// This rpc call is typically made as a callback by a receptor prior to making a report findings or discover
	// service entities receptor request.
	GetConfiguration(ctx context.Context, in *ReceptorOID, opts ...grpc.CallOption) (*ReceptorConfiguration, error)
	// Discovered reports known service entities.  A receptor or a Trustero client application reports its known
	// service entities on request.  A service entity is a configurable asset of a service such as an S3 bucket.  This
	// call returns a string value discovery ID or an error.
	Discovered(ctx context.Context, in *ServiceEntities, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Report a finding to Trustero.  A receptor or a Trustero client application reports its findings to Trustero on
	// a periodic basis.  This call returns a string value collection ID or an error.
	Report(ctx context.Context, in *Finding, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Notify Trustero a long running report finding or discover service entities receptor-request has completed.
	// JobResult contains information about the receptor-request and it's corresponding result.
	Notify(ctx context.Context, in *JobResult, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetConfiguration reports the configuration for receptors that need extra configuration to access a service.
	// This call is typically made as a callback by a receptor after credential verification.
	SetConfiguration(ctx context.Context, in *ReceptorConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// StreamReport is used to stream large reports to Trustero. The report is sent in chunks and the first chunk
	// contains the boundary with the mime type.
	StreamReport(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ReportChunk, ReportResponse], error)
}

type receptorClient struct {
	cc grpc.ClientConnInterface
}

func NewReceptorClient(cc grpc.ClientConnInterface) ReceptorClient {
	return &receptorClient{cc}
}

func (c *receptorClient) Verified(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Receptor_Verified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) GetConfiguration(ctx context.Context, in *ReceptorOID, opts ...grpc.CallOption) (*ReceptorConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceptorConfiguration)
	err := c.cc.Invoke(ctx, Receptor_GetConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) Discovered(ctx context.Context, in *ServiceEntities, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, Receptor_Discovered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) Report(ctx context.Context, in *Finding, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, Receptor_Report_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) Notify(ctx context.Context, in *JobResult, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Receptor_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) SetConfiguration(ctx context.Context, in *ReceptorConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Receptor_SetConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) StreamReport(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ReportChunk, ReportResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Receptor_ServiceDesc.Streams[0], Receptor_StreamReport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportChunk, ReportResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Receptor_StreamReportClient = grpc.ClientStreamingClient[ReportChunk, ReportResponse]

// ReceptorServer is the server API for Receptor service.
// All implementations should embed UnimplementedReceptorServer
// for forward compatibility.
//
// Receptor service, or a Trustero client application, collects findings supporting the use of services from a
// service provider account.  For example, AWS is a service provider, AWS account is a service provider account,
// and S3 is a service.  Trustero associates collected evidence to business controls in support of the business'
// stated procedures.  Evidences are organized into a finding.  Each evidence is associated with a service entity
// and contains the service's configuration information. For example, an AWS S3 bucket and its configuration.
type ReceptorServer interface {
	// Verified reports whether the provided credential is a valid service provider credential for purpose of
	// discovering service entities and reporting findings.  This rpc call is typically made as callback by a
	// receptor to Trustero from a check-credential receptor request.
	Verified(context.Context, *Credential) (*emptypb.Empty, error)
	// GetConfiguration for the receptor and service provider credential using the provided receptor object identifier.
	// This rpc call is typically made as a callback by a receptor prior to making a report findings or discover
	// service entities receptor request.
	GetConfiguration(context.Context, *ReceptorOID) (*ReceptorConfiguration, error)
	// Discovered reports known service entities.  A receptor or a Trustero client application reports its known
	// service entities on request.  A service entity is a configurable asset of a service such as an S3 bucket.  This
	// call returns a string value discovery ID or an error.
	Discovered(context.Context, *ServiceEntities) (*wrapperspb.StringValue, error)
	// Report a finding to Trustero.  A receptor or a Trustero client application reports its findings to Trustero on
	// a periodic basis.  This call returns a string value collection ID or an error.
	Report(context.Context, *Finding) (*wrapperspb.StringValue, error)
	// Notify Trustero a long running report finding or discover service entities receptor-request has completed.
	// JobResult contains information about the receptor-request and it's corresponding result.
	Notify(context.Context, *JobResult) (*emptypb.Empty, error)
	// SetConfiguration reports the configuration for receptors that need extra configuration to access a service.
	// This call is typically made as a callback by a receptor after credential verification.
	SetConfiguration(context.Context, *ReceptorConfiguration) (*emptypb.Empty, error)
	// StreamReport is used to stream large reports to Trustero. The report is sent in chunks and the first chunk
	// contains the boundary with the mime type.
	StreamReport(grpc.ClientStreamingServer[ReportChunk, ReportResponse]) error
}

// UnimplementedReceptorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceptorServer struct{}

func (UnimplementedReceptorServer) Verified(context.Context, *Credential) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verified not implemented")
}
func (UnimplementedReceptorServer) GetConfiguration(context.Context, *ReceptorOID) (*ReceptorConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedReceptorServer) Discovered(context.Context, *ServiceEntities) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discovered not implemented")
}
func (UnimplementedReceptorServer) Report(context.Context, *Finding) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedReceptorServer) Notify(context.Context, *JobResult) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedReceptorServer) SetConfiguration(context.Context, *ReceptorConfiguration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfiguration not implemented")
}
func (UnimplementedReceptorServer) StreamReport(grpc.ClientStreamingServer[ReportChunk, ReportResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamReport not implemented")
}
func (UnimplementedReceptorServer) testEmbeddedByValue() {}

// UnsafeReceptorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceptorServer will
// result in compilation errors.
type UnsafeReceptorServer interface {
	mustEmbedUnimplementedReceptorServer()
}

func RegisterReceptorServer(s grpc.ServiceRegistrar, srv ReceptorServer) {
	// If the following call pancis, it indicates UnimplementedReceptorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Receptor_ServiceDesc, srv)
}

func _Receptor_Verified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Verified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receptor_Verified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Verified(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceptorOID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receptor_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).GetConfiguration(ctx, req.(*ReceptorOID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_Discovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceEntities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Discovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receptor_Discovered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Discovered(ctx, req.(*ServiceEntities))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Finding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receptor_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Report(ctx, req.(*Finding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receptor_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Notify(ctx, req.(*JobResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_SetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceptorConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).SetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receptor_SetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).SetConfiguration(ctx, req.(*ReceptorConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_StreamReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReceptorServer).StreamReport(&grpc.GenericServerStream[ReportChunk, ReportResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Receptor_StreamReportServer = grpc.ClientStreamingServer[ReportChunk, ReportResponse]

// Receptor_ServiceDesc is the grpc.ServiceDesc for Receptor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receptor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receptor_v1.Receptor",
	HandlerType: (*ReceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verified",
			Handler:    _Receptor_Verified_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _Receptor_GetConfiguration_Handler,
		},
		{
			MethodName: "Discovered",
			Handler:    _Receptor_Discovered_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Receptor_Report_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Receptor_Notify_Handler,
		},
		{
			MethodName: "SetConfiguration",
			Handler:    _Receptor_SetConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReport",
			Handler:       _Receptor_StreamReport_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "receptor_v1/receptor.proto",
}
